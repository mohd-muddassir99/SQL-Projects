select * from brands_py;
select * from categories_py;
select * from customers_py;
select * from order_items_py;
select * from orders_py;
select * from products_py;
select * from staffs_py;
select * from stocks_py;
select * from stores_py;

#QUESTION NO 1 :- Identify the top 5 customers who have spent the most money on orders, including their names and total amount spent.
SELECT c.customer_id, c.first_name, sum(ot.list_price) from customers_py as c
right join orders_py as o on c.customer_id = o.customer_id
left join order_items_py as ot on o.order_id = ot.order_id
group by c.customer_id, c.first_name
order by sum(ot.list_price)  desc limit 5;

#QUESTION NO 2:- List all orders along with the product names, brand names, and category names associated with each order.
SELECT ot.order_id,p.product_id, p.product_name, b.brand_name, c.category_name from products_py as p
left join brands_py as b on p.brand_id = b.brand_id
left join categories_py as c on p.category_id = c.category_id
join order_items_py as ot on ot.product_id = p.product_id;

#QUESTION NO 3:- Calculate the total revenue generated by each store, including store names and total revenue.
SELECT o.store_id, s.store_name, sum(ot.list_price) as Total_Revenue from stores_py as s
left join orders_py as o on s.store_id = o.store_id
left join order_items_py as ot on o.order_id = ot.order_id
group by o.store_id, s.store_name;

#QUESTION NO 4:- Find the most popular product category based on the highest total quantity ordered, including category name and total quantity.
SELECT DISTINCT ot.order_id, c.category_name, sum(ot.quantity) from categories_py as c
join products_py as p on c.category_id = p.category_id
join order_items_py as ot on p.product_id = ot.product_id
group by ot.order_id, c.category_name
ORDER BY sum(ot.quantity) desc limit 10;

#QUESTION NO 5:- List all staff members who are managers and the stores they manage, including staff names and store names.
SELECT stf.staff_id, stf.first_name, stf.last_name, st.store_id,st.store_name, m.manager_id, m.first_name, m.last_name from staffs_py as stf
join staffs_py as m on stf.manager_id = m.manager_id
join stores_py as st on stf.store_id = st.store_id;

#QUESTION NO 6:- Identify customers who have never placed an order, including their names and contact details.
SELECT c.customer_id, c.first_name, c.last_name , c.phone, c.email, o.order_id from customers_py as c
left join orders_py as o on c.customer_id = o.customer_id
where order_id  = 'null' ;

#QUESTION NO 7:- Find the top 3 most ordered products along with their total order quantities, including product names and total quantities.
select p.product_name, sum(ot.quantity) as Total_quantity from products_py as p
left join order_items_py as ot on p.product_id = ot.product_id
group by p.product_name
order by sum(ot.quantity) desc limit 3;

#QUESTION NO 8:- List all products that are out of stock in every store, including product names.
SELECT s.store_id, p.product_name, s.quantity from products_py as p
left join stocks_py as s on p.product_id = s.product_id
where s.quantity < 1;

#QUESTION NO 9:- Calculate the average discount given on all orders for each product, including product names and average discounts.
SELECT p.product_id, p.product_name, avg(ot.discount *100) from products_py as p
left join order_items_py as ot on p.product_id = ot.product_id
group by p.product_id, p.product_name;

#QUESTION NO 10:- Determine the total revenue and the number of orders for each customer who placed orders in the last month, including customer names, total revenue, and order count.
SELECT c.customer_id, c.first_name, c.last_name, count(ot.order_id), sum(ot.list_price), o.order_date from customers_py as c 
left join orders_py as o on c.customer_id = o.customer_id
left join order_items_py as ot on o.order_id = ot.order_id
where order_date < '2017-07-01' and order_date > '2017-05-31'
group by c.customer_id, c.first_name, c.last_name, o.order_date
